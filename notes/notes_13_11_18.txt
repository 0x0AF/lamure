Tasks for next week


Sort and test adding stuff to vertices


See if textures are propogated through simplification process:

 - pass texture coordinates and normals and indices to polyhedron builder function
	 - can this be done with a better data struct - worth it?
 - add to polyhedron within points
 - check simplification still runs
 - manual check of post simplification mesh? 


To test, write an obj with a tex coord fields
- overwrite polyhedron writer classes to create an updated writer
 - all in /usr/include/CGAL/IO


Look into creating charts - process




Downsweep algorithm overview:

 - load i all triangles
 - make a queue of nodes with a root node

  - while queue is not empty:
  	- fetch front node
  	- sort and split along longest axis
  	- calculate bounds of children
  	- push to queue
  	- termination - min number of triangles


Node class needed with range (begin and end)
hierarchy can be stored implicitly




Upsweep:
 - simplification
 - need to consider how to treat boundaries between nodes
 - 


TO DO:
 - find out how to constrain edge boundaries through simplification	
 - look into chart creation algorithm



Edge freezing:
 - example 4.9 here: https://doc.cgal.org/latest/Surface_mesh_simplification/index.html

Summary:

{
JUST FOR CHECKING
 - iterate through edges with Polyhedron::Halfedge_iterator
 - add certain edges to a "constrained_edges" list, according to...
	- whether the triangles that belong to them are in a different node?
}

 - create struct that takes pointer to poyhedron, and has a get function that, for each edge, returns true if it is protected
	- in the default implementation, an is_border() function exists:
		-how does this work? is it enough for us if we only simplify part of the mesh at a time, i.e. treat each node as a separate mesh
		- if not, Polyhedron_items_with_id_3 allows attachment of ids to points, halfedges and faces
			- we could use this to lookup which edges should be protected, e.g. by checking if an edge's triangles belong to different nodes  


 - attempting to make non-manifold meshes to check whether CGAL automatically detects borders. Could look in the code to acheive this?
 - are Polyhedron mesheseven allowed to be non-manifold?? - yes: "The polyhedral surface itself can have holes. The halfedges along the boundary of a hole are called border halfedges and have no incident facet. An edge is a border edge if one of its halfedges is a border halfedge. A surface is closed if it contains no border halfedges. A closed surface is a boundary representation for polyhedra in three dimensions." https://doc.cgal.org/latest/Polyhedron/classCGAL_1_1Polyhedron__3.html.
